{"version":3,"sources":["components/Form/Form.js","components/Text/Text.js","App.js","serviceWorker.js","index.js"],"names":["Form","useState","email","password","form","setForm","modifyForm","e","target","name","value","console","log","className","htmlFor","onChange","type","styles","includes","emailStyles","id","aria-describedby","Text","props","message","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"gRAmEeA,EAjEF,WAAO,IAAD,EACOC,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KADvC,mBACVC,EADU,KACJC,EADI,KAGXC,EAAa,SAACC,GAClBF,EAAQ,2BAAKD,GAAN,kBAAaG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,SAC7CC,QAAQC,IAAIR,IAoBd,OACE,6BACE,yBAAKS,UAAU,aACb,8BACE,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,sBAAf,iBACA,2BACEC,SAAUT,EACVU,KAAK,QACLH,UArBQ,WAClB,IAAII,EAAS,eAQb,OANIb,EAAKF,MAAMgB,SAAS,KACtBD,GAAU,kBAEVA,GAAU,iBAGLA,EAYcE,GACXV,KAAK,QACLW,GAAG,qBACHC,mBAAiB,cAEnB,2BAAOD,GAAG,YAAYP,UAAU,wBAAhC,mDAIF,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,yBAAf,YACA,2BAEEC,SAAUT,EACVU,KAAK,WACLP,KAAK,WACLI,UAAU,eACVO,GAAG,2BAGP,4BAAQJ,KAAK,SAASH,UAAU,mBAAhC,YAKJ,4BAAKT,EAAKF,OACV,4BAAKE,EAAKD,YCpDDmB,EARF,SAACC,GACZ,OACE,6BACE,wBAAIV,UAAW,gBAAiBU,EAAMC,WC2B7BC,MAvBf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAMa,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,WAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAMJ,QAAQ,oBAEhB,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,UAChB,kBAAC,EAAD,CAAMJ,QAAQ,qBAEhB,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,WAAWC,UAAW7B,QCb9B8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMvB,c","file":"static/js/main.1773874b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Form = () => {\r\n  const [form, setForm] = useState({ email: \"\", password: \"\" });\r\n\r\n  const modifyForm = (e) => {\r\n    setForm({ ...form, [e.target.name]: e.target.value });\r\n    console.log(form);\r\n  };\r\n\r\n  // const modifyPassword = (e) => {\r\n  //   setForm({ ...form, password: e.target.value });\r\n  //   console.log(form);\r\n  // };\r\n\r\n  const emailStyles = () => {\r\n    let styles = \"form-control\";\r\n\r\n    if (form.email.includes(\"@\")) {\r\n      styles += \" border-success\";\r\n    } else {\r\n      styles += \" border-danger\";\r\n    }\r\n\r\n    return styles;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <form>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"exampleInputEmail1\">Email address</label>\r\n            <input\r\n              onChange={modifyForm}\r\n              type=\"email\"\r\n              className={emailStyles()}\r\n              name=\"email\"\r\n              id=\"exampleInputEmail1\"\r\n              aria-describedby=\"emailHelp\"\r\n            />\r\n            <small id=\"emailHelp\" className=\"form-text text-muted\">\r\n              We'll never share your email with anyone else.\r\n            </small>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n            <input\r\n              // onChange={modifyPassword}\r\n              onChange={modifyForm}\r\n              type=\"password\"\r\n              name=\"password\"\r\n              className=\"form-control\"\r\n              id=\"exampleInputPassword1\"\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <h1>{form.email}</h1>\r\n      <h1>{form.password}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Text = (props) => {\r\n  return (\r\n    <div>\r\n      <h1 className={\"text-success\"}>{props.message}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Text;\r\n","import React from \"react\";\n\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Form from \"./components/Form/Form\";\nimport Nav from \"./components/Nav/Nav\";\nimport Text from \"./components/Text/Text\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        {/* <Nav /> */}\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/about\">About</Link>\n        <Link to=\"/contact\">Contact</Link>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Text message=\"from home page\" />\n          </Route>\n          <Route exact path=\"/about\">\n            <Text message=\"from about page\" />\n          </Route>\n          <Route exact path=\"/contact\" component={Form} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}